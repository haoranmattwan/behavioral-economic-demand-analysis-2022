---
title: "Behavioral-Economic Analysis of Demand and Preference"
subtitle: "An R Replication of Kirkman et al. (2022), Learning and Motivation"
author: "Haoran (Matt) Wan"
date: "today"
format: 
  html:
    toc: true
    code-fold: false
    self-contained: true
    theme: cosmo
    mainfont: "Garamond"
execute:
  warning: false
  message: false
engine: knitr
---

## Project Objective

This document provides the complete R code to replicate the behavioral-economic analyses from the publication:

> Kirkman, C., Wan, H., & Hackenberg, T. D. (2022). A behavioral-economic analysis of demand and preference for social and food reinforcement in rats. *Learning and Motivation*, *77*, 101780. https://doi.org/10.1016/j.lmot.2021.101780

The study uses demand curve analysis to quantify the value of food and social reinforcers for rats. It investigates how demand for each reinforcer changes as its own price increases (**own-price elasticity**) and how demand for one reinforcer changes as the price of the *other* reinforcer increases (**cross-price elasticity**). This allows for a quantitative assessment of whether the reinforcers act as substitutes, complements, or are independent.

## Analytical Approach

The core of the analysis involves fitting specialized models from behavioral economics to consumption data (reinforcers earned per session) plotted against price (Fixed Ratio requirement):

1.  **Own-Price Demand**: The **Zero-Bounded Exponential (ZBEn) model** is fit using nonlinear least-squares to characterize how demand intensity ($Q_0$) and elasticity ($\alpha$) change with price.
2.  **Cross-Price Demand**: Both **linear** and **nonlinear exponential models** are fit to characterize how consumption of a constant-price reinforcer changes as the price of the alternative reinforcer varies.

## Analysis Workflow

1.  **Setup**: Load R packages, define helper functions (like the IHS transformation), and load/prepare the dataset.
2.  **Phase 1 Analysis**: Model own-price demand for food and cross-price demand for social interaction when the food price increases.
3.  **Phase 2 Analysis**: Model own-price demand for social interaction and cross-price demand for food when the social price increases.
4.  **Phase 3 Analysis**: Model own-price demand for both food and social interaction when both prices increase concurrently.
5.  **Phase 4 Analysis**: Model own-price demand for food when no social alternative is present and compare it to Phase 1 results.

---

## 1. Setup: Load Packages, Define Functions, and Prepare Data

This section loads the required R packages, defines the Inverse Hyperbolic Sine (IHS) transformation needed for the ZBEn model, and loads the processed dataset.

```{r setup}
# --- 1.1 Load Required Packages ---
library(readr)      # For reading CSV files
library(dplyr)      # For data manipulation
library(minpack.lm) # For robust non-linear least squares (nlsLM)

# --- 1.2 Define Helper Function ---

#' Inverse Hyperbolic Sine (IHS) Transformation
#'
#' Applies the IHS transformation, a log-like function defined at zero,
#' required for the dependent variable in the ZBEn demand model.
#'
#' @param x A numeric vector or scalar.
#' @return The IHS-transformed value(s).
lhs <- function(x) {
  log10(0.5 * x + sqrt(0.25 * (x^2) + 1))
}

# --- 1.3 Load and Prepare Data ---
# Load the pre-processed data containing session means.
# Assumes the file is in a subdirectory named 'Data'.
raw_data <- read.csv("data with bl mean.csv")

# Prepare the data for modeling:
# - Rename columns for clarity (optional, but good practice)
# - Apply the IHS transformation to the consumption rate columns
analysis_data <- raw_data |>
  # Example renaming (adjust based on actual column names if needed):
  # rename(food_rate = foodr, social_rate = socr) |>
  mutate(
    food_rate_ihs = lhs(foodr),   # IHS transformed food consumption rate
    social_rate_ihs = lhs(socr)   # IHS transformed social consumption rate
  )
```

---

## 2. Demand Curve Analysis

This section replicates the model fitting in the order presented in the Results section of the published article. Each subsection corresponds to an experimental phase.

### Phase 1: Food Price Varied, Social Price Constant (FR 1)

In this phase, the price of food was systematically increased across sessions, while the price of social interaction was held constant at a low price (FR 1). This allows us to perform two key analyses:

1.  **Own-Price Demand for Food**: We fit the **Zero-Bounded Exponential (ZBEn) model** to the food consumption data. This analysis quantifies how demand for food changes as its own price increases. We expect to see consumption decrease as price increases.
2.  **Cross-Price Demand for Social Interaction**: We model how consumption of the constant-price social reinforcer changes as the price of food increases. An increase in social consumption as food becomes more expensive would indicate a **substitutable relationship** between the two reinforcers.

```{r phase1_analysis}
# --- 2.1 Phase 1 Analysis: Food Price Varied ---

# --- Own-Price Demand for Food (ZBEn Model) ---
# This analysis fits the ZBEn model to each subject's food consumption data
# from Phase 1 to estimate demand intensity (Q0) and elasticity (alpha).

cat("--- Phase 1: Own-Price Food Demand Parameters (ZBEn Model) ---\n")
own_price_food_p1 <- analysis_data |>
  filter(cond == 1) |>
  group_by(subj) |>
  reframe({
    # Fit the nlsLM model only ONCE per subject
    fit <- nlsLM(
      food_rate_ihs ~ lhs(Q0) * exp((-a / lhs(Q0)) * Q0 * foodfr),
      start = list(a = 0.0001, Q0 = 50),
      control = nls.lm.control(maxiter = 1024)
    )
    # Extract coefficients into a tidy data frame
    tibble(
      alpha = coef(fit)[['a']],
      Q0 = coef(fit)[['Q0']]
    )
  })

print(own_price_food_p1)


# --- Cross-Price Demand for Social Interaction (Exponential Model) ---
# This analysis fits an exponential model to social consumption data to test
# how it changes as a function of the increasing food price.
# A negative 'I' (Interaction) parameter indicates substitutability.

cat("\n--- Phase 1: Cross-Price Social Demand Parameters (Exponential Model) ---\n")
cross_price_social_p1 <- analysis_data |>
  filter(cond == 1) |>
  group_by(subj) |>
  reframe({
    # Fit the nlsLM model only ONCE per subject
    fit <- nlsLM(
      socr ~ log10(Q_alone) + I * exp(-beta * foodfr),
      start = list(beta = 0.01, Q_alone = 100, I = 1),
      control = nls.lm.control(maxiter = 1024)
    )
    # Extract coefficients into a tidy data frame
    tibble(
      beta = coef(fit)[['beta']],
      Q_alone = coef(fit)[['Q_alone']],
      I = coef(fit)[['I']]
    )
  })

print(cross_price_social_p1)
```

---

### Phase 2: Social Price Varied, Food Price Constant (FR 1)

In this phase, the experimental conditions were reversed: the price of social interaction was systematically increased across sessions, while the price of food was held constant at a low price (FR 1). This allows us to test the other side of the reinforcer interaction:

1.  **Own-Price Demand for Social Interaction**: We fit the **ZBEn model** to the social interaction data to quantify how demand for social access changes as its own price increases.
2.  **Cross-Price Demand for Food**: We model how consumption of the constant-price food reinforcer changes as the price of social interaction increases. If the two reinforcers are independent in this context, we would expect to see little to no change in food consumption.

```{r phase2_analysis}
# --- 2.2 Phase 2 Analysis: Social Price Varied ---

# --- Own-Price Demand for Social Interaction (ZBEn Model) ---
# This analysis fits the ZBEn model to each subject's social consumption data
# from Phase 2 to estimate demand intensity (Q0) and elasticity (alpha).

cat("--- Phase 2: Own-Price Social Demand Parameters (ZBEn Model) ---\n")
own_price_social_p2 <- analysis_data |>
  filter(cond == 2) |>
  group_by(subj) |>
  reframe({
    # Fit the nlsLM model only ONCE per subject
    fit <- nlsLM(
      social_rate_ihs ~ lhs(Q0) * exp((-a / lhs(Q0)) * Q0 * socfr),
      start = list(a = 0.0001, Q0 = 50),
      control = nls.lm.control(maxiter = 1024)
    )
    # Extract coefficients into a tidy data frame
    tibble(
      alpha = coef(fit)[['a']],
      Q0 = coef(fit)[['Q0']]
    )
  })

print(own_price_social_p2)


# --- Cross-Price Demand for Food (Exponential Model) ---
# This analysis fits an exponential model to food consumption data to test
# how it changes as a function of the increasing social price.
# A non-significant 'I' (Interaction) parameter suggests independence.

cat("\n--- Phase 2: Cross-Price Food Demand Parameters (Exponential Model) ---\n")
cross_price_food_p2 <- analysis_data |>
  filter(cond == 2) |>
  group_by(subj) |>
  reframe({
    # Fit the nlsLM model only ONCE per subject
    fit <- nlsLM(
      foodr ~ log10(Q_alone) + I * exp(-beta * socfr),
      start = list(beta = 0.01, Q_alone = 100, I = 1),
      control = nls.lm.control(maxiter = 1024)
    )
    # Extract coefficients into a tidy data frame
    tibble(
      beta = coef(fit)[['beta']],
      Q_alone = coef(fit)[['Q_alone']],
      I = coef(fit)[['I']]
    )
  })

print(cross_price_food_p2)
```

---

### Phase 3: Concurrent Price Increase

In this phase, the prices of both food and social reinforcers were increased together across sessions. This allows for a direct, within-subject comparison of the **own-price demand** for each reinforcer when both are becoming progressively more expensive.

We again fit the **ZBEn model** to the consumption data for each reinforcer separately. This analysis helps determine which reinforcer retains its value more effectively under escalating costs. Note that only two subjects (Rats 4 and 6) completed this phase of the experiment.

```{r phase3_analysis}
# --- 2.3 Phase 3 Analysis: Concurrent Price Increase ---

# In this phase, the prices for food and social interaction increased together.
# We fit the ZBEn model to each reinforcer type to compare their demand parameters
# directly under these conditions.

cat("--- Phase 3: Own-Price Demand Parameters (ZBEn Model) ---\n")
own_price_p3 <- analysis_data |>
  filter(cond == 3) |>
  # Pivot to a long format to analyze both reinforcers in one pipeline
  tidyr::pivot_longer(
    cols = c(foodr, socr),
    names_to = "reinforcer_type",
    values_to = "consumption"
  ) |>
  mutate(
    price = ifelse(reinforcer_type == "foodr", foodfr, socfr),
    consumption_ihs = lhs(consumption)
  ) |>
  group_by(subj, reinforcer_type) |>
  reframe({
    # Fit the nlsLM model once for each subject and reinforcer type
    fit <- nlsLM(
      consumption_ihs ~ lhs(Q0) * exp((-a / lhs(Q0)) * Q0 * price),
      start = list(a = 0.0001, Q0 = 50),
      control = nls.lm.control(maxiter = 1024)
    )
    # Extract coefficients into a tidy data frame
    tibble(
      alpha = coef(fit)[['a']],
      Q0 = coef(fit)[['Q0']]
    )
  })

print(own_price_p3)
```

---

### Phase 4: Food Demand in Isolation (No Social Alternative)

In this final phase, the demand for food was assessed when it was the only available reinforcer. The price of food was systematically increased across sessions, just as in Phase 1, but with the social interaction option removed entirely.

This design allows for a direct comparison of the **own-price demand for food** in two different economic contexts: with a potential substitute available (Phase 1) versus without one (Phase 4). By comparing the demand parameters ($\alpha$ and $Q_0$) between these phases, we can quantify how the presence of a social alternative impacts the value of food. Note that only two subjects (Rats 4 and 6) completed this phase.

```{r phase4_analysis}
# --- 2.4 Phase 4 Analysis: Food Price Varied in Isolation ---

# This analysis fits the ZBEn model to each subject's food consumption data
# from Phase 4, where no social alternative was available.

cat("--- Phase 4: Own-Price Food Demand Parameters (ZBEn Model, No Social Alternative) ---\n")
own_price_food_p4 <- analysis_data |>
  filter(cond == 4) |>
  group_by(subj) |>
  reframe({
    # Fit the nlsLM model only ONCE per subject
    fit <- nlsLM(
      food_rate_ihs ~ lhs(Q0) * exp((-a / lhs(Q0)) * Q0 * foodfr),
      start = list(a = 0.0001, Q0 = 50),
      control = nls.lm.control(maxiter = 1024)
    )
    # Extract coefficients into a tidy data frame
    tibble(
      alpha = coef(fit)[['a']],
      Q0 = coef(fit)[['Q0']]
    )
  })

print(own_price_food_p4)
```